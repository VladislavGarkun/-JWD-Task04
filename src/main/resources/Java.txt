Истоки Java.
Главными причинами, побуждающими к созданию нового языка программирования,
служат совершенствование искусства программирования и изменения в вычислительной 
среде. И Java не является исключением из этого правила. Опираясь на богатое наследие
С и С++, этот язык программирования расширен и дополнен средствами, отражающими текущее положение дел в программировании. Отвечая потребностям возникшей
интерактивной среды, Java предоставляет средства, упрощающие создание прикладных
программ с распределенной архитектурой.
Язык Java был задуман в 1991 году сотрудниками компании Sun Microsystems Джеймсом Гослинrом, Патриком Нотоном, Крисом Уортом, Эдом Фрэнком и Майком Шериданом. Первоначально он назывался Oak, но в 1995 году, когда за его продвижение на
рынке взядись маркетологи, он был переименован в Java. Как это ни удивительно, на
первых порах сами разработчики языка не ставили перед собой задач разработки интернет-приложений. Их целью бьuю создание платформенно-независимоrо языка, на
котором можно было бы писать встраиваемое программное обеспечение для различной
бытовой аппаратуры с микропроцессорным управлением, в том числе тостеров, микроволновых печей и пультов дистанционного управления. Как правило, в устройствах подобного типа применялись контроллеры на базе микропроцессоров различной архитектуры, а исполняемый код, генерируемый компиляторами большинства существовавших
в то время языков программирования, был ориентирован на определенные типы процессоров. Характерным тому примером может служить язык С++.
Несмотря на то что программу, написанную на С++, можно выполнить на процессоре практически любого типа, сделать это можно, лишь скомпилировав ее в исполняемый код команд конкретного процессора. Создание компиляторов - длительный и
трудоемкий процесс, поэтому в поисках оптимального решения Гослинr и другие члены
рабочей группы остановились на межплатформенном языке, для которого компилятор
генерировал бы код, способный выполняться на разных процессорах в различных вычислительных средах. В конце концов их усилия увенчались созданием языка, известного теперь под названием Java.
В то время как разработчики Java уточняли детали создаваемого ими языка, началось
бурное развитие "Всемирной паутины", во многом определившей будущее Java. Если бы
не формирование веб-сообщества, язык Java, вероятно, нашел бы лишь ограниченное
применение, главным образом в разработке программ, встраиваемых в специализированные контроллеры. Но как только широкодоступный Интернет стал реальностью, появилась острая потребность в переносимых программах, что и послужило причиной для
выдвижения Java на передний план в качестве основного языка разработки подобных
программ.
По мере накопления опыта многие программисты очень быстро приходят к выводу,
что переносимость программ - это нечто вроде труднодостижимого идеала. Задача создания кросс-платформенных программ возникла едва ли не вместе с появлением первых
компьютеров, но взяться за ее решение так и не удавалось из-за необходимости решать
другие, более важные и неотложные задачи. Тем не менее с появлением Интернета проблема переносимости программ перешла в разряд совершенно неотложных. Ведь Интернет состоит из множества разнотипных компьютеров с различной архитектурой процессоров и разными операционными системами.
В итоге увлекательная, но маловажная задача неожиданно стала чрезвычайно актуальной. В 1993 году разработчикам Java стало ясно, что задачу переносимости нужно решать не только при программировании микропроцессорных устройств, но и при создании кода для интернет-приложений. Иными словами, сфера применения языка Java
внезапно расширилась. И если программирование микроконтроллеров стало побудительной причиной для создания Java, то Интернет способствовал широкому распространению этого языка. 

Взаимосвязь между Java и языками С и С++.
Язык Java очень похож на языки С и С++. От С язык Java унаследовал синтаксис,
а от С++ - объектную модель. Сходство Java с языками С и С++ играет важную роль.
Во-первых, многие программисты знакомы с синтаксисом С и С++, что упрощает изучение языка Java. Те же, кто освоил Java, могут без труда изучить С и С++.
Во-вторых, тем, кто программирует на Java, не приходится изобретать колесо. Они
могут успешно применять уже известные и хорошо зарекомендовавшие себя подходы.
Современная эпоха в программировании, по существу, началась с языка С. Затем появился язык С++, а после него - Java. Имея такое богатое наследство, Java предоставляет программистам производительную и логически согласованную среду, в которой были
реализованы лучшие из уже известных решений и добавлены новые средства, необходимые для интерактивной среды. Очень важно отметить тот факт, что вследствие своей
схожести языки С, С++ и Java сформировали концептуальную основу для профессионального программирования. При переходе от одного языка к другому программистам
не приходится преодолевать глубокие "пропасти" принципиального характера.
Один из принципов проектирования, заложенных в основу С и С++, заключается в
предоставлении программисту широчайших полномочий. Разработчики Java также следовали этому принципу. Если не учитывать ограничения, накладываемые средой Интернета, то следует признать, что Java предоставляет программисту полный контроль над
кодом. Если вы умеете грамотно программировать, это будет видно по вашим программам. Недостаток опыта также отразится на ваших программах. Одним словом, Java -
язык не для дилетантов, а для профессионалов.
У Java имеется еще одно сходство с языками С и С++: все эти языки были задуманы,
разработаны, проверены и уточнены программистами-практиками. В их основу положены реальные потребности их создателей. При таком подходе к разработке языка программирования велика вероятность получить качественный продукт, способный найти
признание у специалистов.
Из-за сходства языков Java и С++, в особенности из-за подобия предоставляемых
ими средств для объектно-ориентированного программирования, возникает соблазн
рассматривать Java как своего рода версию С++ для Интернета. Но это было бы ошибкой. У Java имеется целый ряд существенных отличий от С++ как в концептуальном,
так и в прикладном плане. Несмотря на то что С++ оказал очень сильное влияние на
язык Java, последний вовсе не является расширенной версией первого. В частности, эти
языки не совместимы ни сверху вниз, ни снизу вверх. Конечно, сходство с языком С++
очень важно, и если у вас имеется опыт программирования на С++, вы будете чувствовать себя в своей стихии, программируя на Java. Но не следует забывать, что Java был
разработан не на замену С++, а для решения вполне определенного круга задач, отличающихся от тех, что решаются с помощью С++. Именно поэтому мирное сосуществование Java и С++ будет продолжаться еще многие годы. 

Объектно-ориентированное программирование.
Одним из главных свойств Java является поддержка объектно-ориентированного
программирования (ООП). Объектная методология неотделима от Java, а все программы
на Java в той или иной степени являются объектно-ориентированными. Поэтому имеет
смысл кратко рассмотреть принципы ООП, прежде чем переходить к написанию даже
самой простой программы на Java. Далее вы увидите, как эти принципы реализуются на
практике.
Объектно-ориентированный подход к программированию позволяет разрабатывать
достаточно сложные программы. С момента появления первого компьютера методология программирования претерпела ряд существенных изменений, связанных с возрастанием сложности программ. На заре вычислительной техники процесс программирования представлял собой ввод машинных команд в двоичной форме с пульта управления
ЭВМ. В то время размеры программ не превышали нескольких сотен команд, и поэтому
такой подход считался вполне приемлемым. Затем появился язык ассемблера. Символьное представление машинных команд и процедура компиляции позволили перейти к
созданию более сложных программ. В связи с дальнейшим увеличением объема программного кода появились языки высокого уровня. Они стали теми инструментами,
которые позволили программистам справиться с постепенным усложнением программ.
Первым из широко распространенных языков высокого уровня стал FORTRAN. Разработка FORTRAN стала важным этапом в развитии языков программирования, но этот
язык не вполне подходил для создания удобочитаемых программ.
В 1960-е годы начало зарождаться структурное программирование. Впоследствии для
поддержки данного подхода был созданы такие языки, как С и Pascal. Благодаря структурированным языкам программирования появилась возможность создавать программы
средней сложности. Главными свойствами структурированных языков стали поддержка независимых подпрограмм, локальных переменных, наличие расширенного набора
управляющих конструкций и отсутствие оператора GOTO. Но, несмотря на то что структурированные языки стали мощными инструментами программирования, с увеличением объема и сложности проектов их возможности быстро исчерпались. 
На каждом очередном этапе развития методологии и инструментальных средств программирования разработчики получали возможность создавать все более сложные программы. На этом пути очередной подход наследовал лучшие черты своих· предшественников, а кроме тоrо, он приобретал новые качества, позволявшие двигаться вперед.
К моменту разработки принципов ООП многие проекты стали настолько сложными,
что управлять ими средствами структурного программирования уже не представлялось
возможным. Объектно-ориентированная методология позволила разработчикам преодолеть эти препятствия.
Создатели объектно-ориентированного программирования переняли лучшие идеи
структурного программирования и дополнили их новыми понятиями. В результате возник новый способ организации программ. В принципе, программы могут создаваться
двумя путями: на основе кода (выполняющего действия) и на основе данных (подвергающихся обработке). При использовании только принципов структурного программирования программы организуются на основе кода. Такой подход можно рассматривать как
код, воздействующий на данные.
Объектно-ориентированное программирование подразумевает другой подход. Программы организуются на основе данных по следующему главному принципу: данные
управляют доступом к коду. В объектно-ориентированных языках программирования
определяются данные и процедуры, которым разрешается обрабатывать эти данные. Таким образом, тип данных определяет те операции, которые применимы к этим данным.
Во всех объектно-ориентированных языках программирования, в том числе и в Java,
поддерживаются три основных принципа ООП: инкапсуляция, полиморфизм и наследование. Рассмотрим каждый из этих принципов по отдельности. 

Инкапсуляция.
Инкапсуляция представляет собой механизм программирования, объединяющий код
и данные, которыми он манипулирует. Он предотвращает несанкционированный доступ к данным извне и их некорректное использование. В объектно-ориентированных
языках программирования код и данные организуются в некое подобие "черного ящика". В результате такого объединения кода и данных создается объект. Иными словами,
объект - это компонент, поддерживающий инкапсуляцию.
Данные и код внутри объекта могут быть закрытыми (pri vate) или открытыми
(puЫic). Закрытый код или данные доступны только элементам, содержащимся в том
же самом объекте. Поэтому обратиться к такому коду или данным вне объекта невозможно. Если код или данные являются открытыми, то к ним можно обращаться из любой части программы (несмотря на то, что они находятся внутри объекта). Как правило,
открытые элементы объекта используются лля создания управляемого интерфейса к ero
закрытым элементам.
Основной языковой конструкцией, поддерживающей инкапсуляцию в Java, является
класс. Классы будут подробнее рассматриваться далее, но о них нужно сказать несколько слов уже теперь. Класс определяет тип объекта. В нем определяются как данные, так
и код, выполняющий определенные действия над этими данными. В Java определение,
или так называемая спецификация класса, служит для построения объектов. Объекты
представляют собой экземпляры классов. Следовательно, класс - это ряд "чертежей",
по которым строится объект.
Код и данные в составе класса называются членами класса. Данные, определенные
в составе класса, принято называть переменными-членами, или переменными экземпляра,
а код, выполняющий действия над этими данными, - методами-членами, или просто методами. Метод - это термин, которым в Java принято обозначать подпрограмму.
Если вы знакомы с языками С/С++, то, вероятно, знаете, что в этих языках для той же
самой цели служит термин функция. 

Полиморфизм.
Полиморфизм (от греческого слова, означающего "много форм") - это свойство, позволяющее с помощью одного интерфейса обращаться к общему классу действий. Конкретное действие определяется ситуацией. В качестве примера, позволяющего лучше
понять принцип полиморфизма, можно привести руль автомобиля. Руль (т.е. интерфейс
взаимодействия) остается одним и тем же, независимо от того, какой именно механизм
рулевого управления применяется в автомобиле, будь то зубчатая, реечная передача или
гидроусилитель. Таким образом, зная, как обращаться с рулем, вы сможете управлять
автомобилем любого типа.
Тот же самый принцип применяется и в программировании. Рассмотрим в качестве
примера стек (структуру данных, организованных по принципу "последним поступил -
первым обслужен"). Допустим, в программе требуются три разнотипных стека. Первый
стек служит для хранения целочисленных значений, второй - для хранения значений с
плавающей точкой и третий - для хранения символьных значений. Каждый стек реализуется с помощью одного и того же алгоритма, несмотря на то что в стеках хранятся разнотипные данные. В случае языка, не поддерживающего ООП, пришлось бы создавать три
разных набора процедур управления стеками, присвоив им разные имена. Но в Java благодаря полиморфизму можно создать один общий набор процедур управления стеками,
который будет действовать по-разному в зависимости от конкретного типа стека. Таким
образом, зная, как работать с одним стеком, можно обращаться со всеми тремя стеками.
Принцип полиморфизма хорошо иллюстрируется следующим выражением: "один
интерфейс - множество методов". Это означает возможность создания универсального
интерфейса для группы взаимосвязанных действий. Полиморфизм упрощает программу
благодаря возможности определить общий класс действий с помощью одного и того же
интерфейса. Выбрать определенное действие (т.е. метод) - задача компилятора, и он
решает ее в зависимости от конкретных условий. Как программисту вам не приходится
выбирать метод вручную. Нужно лишь помнить принципы использования общего интерфейса. 

Наследование.
Наследование - это процесс, в ходе которого один объект приобретает свойства другого объекта. Наследование имеет очень большое значение, поскольку с его помощью
поддерживается иерархическая классификация. Если вдуматься, то знания чаще всего имеют иерархическую структуру. Например, яблоки конкретного сорта относятся
к классу яблок, который в свою очередь относится к классу фруктов, а тот - к более
обширному классу продуктов питания. В данном случае продукты питания обладают
определенными свойствами (они съедобны, калорийны и т.п.). Эти же свойства автоматически присущи подклассу фруктов. Кроме того, класс фруктов обладает дополнительными свойствами (сочные, сладкие и т.п.), что отличает его от класса других продуктов
питания. Яблоки имеют более конкретные свойства (растут на деревьях, не являются
тропическими плодами и т.п.) И наконец, отдельный сорт яблок наследует все свойства
описанных выше классов и, кроме того, обладает особыми свойствами, отличающими
его от других сортов яблок. Без такой иерархической структуры для каждого объекта пришлось бы заново определять весь набор свойств. Благодаря наследованию для объекта достаточно указать те
свойства, которые отличают его от других классов, а остальные общие атрибуты он наследует от своих родительских классов. Таким образом, благодаря наследованию возможно создать объект, являющийся экземпляром более общего класса. 